
#Name of WorkFlow
name: Continuous Integration and Deployment
on:
  push:  
    branches: [ lab2 ]
jobs:
#region 'JOB 1 : BUILD'
  build:
    runs-on: ubuntu-latest    
    env:      
      DOTNET_VERSION: '5.0.x'  
      PUBLISH_PATH: './runner/output'
    steps:
    - name: Step 1 - CHECK Out Code       
      uses: actions/checkout@v2
    - name: Step 2 - SETUP .NET 4.6.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Step 3 - RESTORE the Dependencies 
      run: dotnet restore
    - name: Step 4 - BUILD the API  
      run: dotnet build ./*.sln --configuration Release --no-restore
#Create the Publish files & place in a folder in the Runner      
    - name: Step 5 - PUBLISH the project
    
      #run: dotnet publish ./TheCoreAPI/TheCoreAPI.csproj -c Release -o ${{ env.PUBLISH_PATH }}      
      run: dotnet publish ./TheCoreAPI/TheCoreAPI.csproj -c Release -o ${{ github.sha }}.zip      
#Upload the publish Artifacts from Runner Folder to GitHub Drop, so that w can use for deployment
    - name: Step 6 - UPLOAD ARTIFACTS to gitHub
      uses: actions/upload-artifact@v2
      with: 
        name: drop 
        #path: ${{ env.PUBLISH_PATH }}    #Path from where to grab the Artifacts   
        path: ${{ github.sha }}.zip
#endregion
#region 'JOB 2 : PUBLISH'
  deploy:
    needs: build      #dependency, first build must run
    runs-on: ubuntu-latest            
    steps:    
    - name: Step 1 -CREATE RELEASE
      id: create_release  #id - it is a UniqueIdentifier of the Step
      uses: actions/create-release@v1
      env:      
        GITHUB_TOKEN: ${{ secrets.github_token }} 
      with:
        tag_name: ${{ github.run_number }}  #pre-configured env var that is unique
        release_name: Release ${{ github.run_number }}
        body: New release for ${{ github.sha }}. Release notes LINK can be put here .
        draft: false
        prerelease: false 
    #download-artifact always downloads and 'UNZIP' files to the target directory    
    - name: Step 2 - DOWNLOAD ARTIFACTS from gitHub to this runner  
      uses: actions/download-artifact@v2
      with: 
        name: drop
        path: ${{ github.sha }}.zip   #TargetPath of where to put the Artifacts in the runner     
        #path: ./
    - name: zip
      run: zip â€“r ${{ github.sha }}.zip ${{ github.sha }}.zip/ 
    - name: Display structure of downloaded files
      run: ls -lh
    - name: Step 3 - UPLOAD RELEASE ASSET
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.github_token }} 
      with: 
        upload_url: ${{ steps.create_release.outputs.upload_url }}  #id: create_release, above step
        asset_path: ./${{ github.sha }}.zip
        #asset_path: ./out
        asset_name: source_code_with_libraries.zip
        asset_content_type: application/zip    
    
# #endregion